generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Users {
  id                Int                 @id @default(autoincrement())
  name              String
  email             String              @unique
  companyId         Int
  company           Company             @relation(fields: [companyId], references: [id])
  selectedLocations SelectedLocations[]
  isArchived        Boolean             @default(false)
  createdAt         DateTime            @default(now())
  updatedAt         DateTime            @updatedAt
}

model Company {
  id             Int              @id @default(autoincrement())
  name           String
  address        String
  city           String
  country        String
  zipCode        String
  callingCode    String
  users          Users[]
  menuCategories MenuCategories[]
  locations      Locations[]
  isArchived     Boolean          @default(false)
  createdAt      DateTime         @default(now())
  updatedAt      DateTime         @updatedAt
}

model MenuCategories {
  id                             Int                              @id @default(autoincrement())
  name                           String
  menuCategoriesMenus            MenuCategoriesMenus[]
  disabledLocationMenuCategories DisabledLocationMenuCategories[]
  companyId                      Int
  company                        Company                          @relation(references: [id], fields: [companyId])
  isArchived                     Boolean                          @default(false)
  createdAt                      DateTime                         @default(now())
  updatedAt                      DateTime                         @updatedAt
}

model Menus {
  id                    Int                     @id @default(autoincrement())
  name                  String
  price                 Int?                    @default(0)
  imageUrl              String?
  menuCategoriesMenus   MenuCategoriesMenus[]
  menusAddonCategories  MenusAddonCategories[]
  disabledLocationMenus DisabledLocationMenus[]
  isArchived            Boolean                 @default(false)
  createdAt             DateTime                @default(now())
  updatedAt             DateTime                @updatedAt
}

model MenuCategoriesMenus {
  id             Int            @id @default(autoincrement())
  menuId         Int
  menuCategoryId Int
  menuCategory   MenuCategories @relation(fields: [menuCategoryId], references: [id])
  menu           Menus          @relation(fields: [menuId], references: [id])
  isArchived     Boolean        @default(false)
  createdAt      DateTime       @default(now())
  updatedAt      DateTime       @updatedAt
}

model AddonCategories {
  id                   Int                    @id @default(autoincrement())
  name                 String
  isRequired           Boolean                @default(false)
  addons               Addons[]
  menusAddonCategories MenusAddonCategories[]
  isArchived           Boolean                @default(false)
  createdAt            DateTime               @default(now())
  updatedAt            DateTime               @updatedAt
}

model MenusAddonCategories {
  id              Int             @id @default(autoincrement())
  menuId          Int
  addonCategoryId Int
  addonCategory   AddonCategories @relation(fields: [addonCategoryId], references: [id])
  menu            Menus           @relation(fields: [menuId], references: [id])
  isArchived      Boolean         @default(false)
  createdAt       DateTime        @default(now())
  updatedAt       DateTime        @updatedAt
}

model Addons {
  id              Int             @id @default(autoincrement())
  name            String
  price           Int
  addonCategoryId Int
  isAvailable     Boolean         @default(true)
  addonCategory   AddonCategories @relation(fields: [addonCategoryId], references: [id])
  isArchived      Boolean         @default(false)
  createdAt       DateTime        @default(now())
  updatedAt       DateTime        @updatedAt
}

model Locations {
  id                             Int                              @id @default(autoincrement())
  name                           String
  companyId                      Int
  company                        Company                          @relation(references: [id], fields: [companyId])
  tables                         Tables[]
  disabledLocationMenuCategories DisabledLocationMenuCategories[]
  disabledLocationMenus          DisabledLocationMenus[]
  selectedLocations              SelectedLocations[]
  isArchived                     Boolean                          @default(false)
  createdAt                      DateTime                         @default(now())
  updatedAt                      DateTime                         @updatedAt
}

model Tables {
  id             Int       @id @default(autoincrement())
  name           String
  locationId     Int
  qrCodeImageUrl String
  locations      Locations @relation(fields: [locationId], references: [id])
  isArchived     Boolean   @default(false)
  createdAt      DateTime  @default(now())
  updatedAt      DateTime  @updatedAt
}

model SelectedLocations {
  id         Int       @id @default(autoincrement())
  userId     Int
  locationId Int
  users      Users     @relation(fields: [userId], references: [id])
  locations  Locations @relation(fields: [locationId], references: [id])
  isArchived Boolean   @default(false)
  createdAt  DateTime  @default(now())
  updatedAt  DateTime  @updatedAt
}

model DisabledLocationMenuCategories {
  id             Int            @id @default(autoincrement())
  locationId     Int
  menuCategoryId Int
  locations      Locations      @relation(fields: [locationId], references: [id])
  menuCategories MenuCategories @relation(fields: [menuCategoryId], references: [id])
  isArchived     Boolean        @default(false)
  createdAt      DateTime       @default(now())
  updatedAt      DateTime       @updatedAt
}

model DisabledLocationMenus {
  id         Int       @id @default(autoincrement())
  locationId Int
  menuId     Int
  locations  Locations @relation(fields: [locationId], references: [id])
  menus      Menus     @relation(fields: [menuId], references: [id])
  isArchived Boolean   @default(false)
  createdAt  DateTime  @default(now())
  updatedAt  DateTime  @updatedAt
}
